diff --git a/PTRANS/src/host/execution_types/execution_pcie_pq.hpp b/PTRANS/src/host/execution_types/execution_pcie_pq.hpp
index 93c891a..6785697 100644
--- a/PTRANS/src/host/execution_types/execution_pcie_pq.hpp
+++ b/PTRANS/src/host/execution_types/execution_pcie_pq.hpp
@@ -110,13 +110,13 @@ static  std::unique_ptr<transpose::TransposeExecutionTimings>
                 cl::Buffer bufferA(*config.context, CL_MEM_READ_ONLY | memory_bank_info_a,
                                 buffer_size * sizeof(HOST_DATA_TYPE));
 #else
-                cl::Buffer bufferA(*config.context, CL_MEM_READ_ONLY | memory_bank_info_a,
-                                data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE));
+                cl::Buffer bufferA(*config.context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY | memory_bank_info_a,
+                                data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
 #endif
-                cl::Buffer bufferB(*config.context, CL_MEM_READ_ONLY | memory_bank_info_b,
-                                buffer_size * sizeof(HOST_DATA_TYPE));
-                cl::Buffer bufferA_out(*config.context, CL_MEM_WRITE_ONLY | memory_bank_info_out,
-                                buffer_size * sizeof(HOST_DATA_TYPE));
+                cl::Buffer bufferB(*config.context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY | memory_bank_info_b,
+                                buffer_size * sizeof(HOST_DATA_TYPE), &data.B[bufferStartList[r] * data.blockSize * data.blockSize]);
+                cl::Buffer bufferA_out(*config.context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY | memory_bank_info_out,
+                                buffer_size * sizeof(HOST_DATA_TYPE), &data.result[bufferStartList[r] * data.blockSize * data.blockSize]);
 
 #ifdef INTEL_FPGA
                 cl::Kernel transposeKernel(*config.program, ("transpose" + std::to_string(r)).c_str(), &err);
@@ -170,8 +170,8 @@ static  std::unique_ptr<transpose::TransposeExecutionTimings>
             auto startTransfer = std::chrono::high_resolution_clock::now();
 
         for (int r = 0; r < transposeKernelList.size(); r++) {
-                transCommandQueueList[r].enqueueWriteBuffer(bufferListB[r], CL_FALSE, 0,
-                                        bufferSizeList[r]* sizeof(HOST_DATA_TYPE), &data.B[bufferStartList[r] * data.blockSize * data.blockSize]);
+                // transCommandQueueList[r].enqueueWriteBuffer(bufferListB[r], CL_FALSE, 0,
+                //                         bufferSizeList[r]* sizeof(HOST_DATA_TYPE), &data.B[bufferStartList[r] * data.blockSize * data.blockSize]);
 #ifdef USE_BUFFER_WRITE_RECT_FOR_A
 #ifndef USE_DEPRECATED_HPP_HEADER
                 cl::array<size_t,3> deviceOffset;
@@ -199,8 +199,9 @@ static  std::unique_ptr<transpose::TransposeExecutionTimings>
                                                 local_matrix_width* data.blockSize*sizeof(HOST_DATA_TYPE), 0,
                                                 data.A);
 #else
-                transCommandQueueList[r].enqueueWriteBuffer(bufferListA[r], CL_FALSE, 0,
-                                        data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
+                // transCommandQueueList[r].enqueueWriteBuffer(bufferListA[r], CL_FALSE, 0,
+                //                         data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
+                transCommandQueueList[r].enqueueMigrateMemObjects({bufferListA[r], bufferListB[r]}, 0);
 #endif
 
         }
@@ -246,11 +247,15 @@ static  std::unique_ptr<transpose::TransposeExecutionTimings>
                                                 local_matrix_width* data.blockSize*sizeof(HOST_DATA_TYPE), 0,
                                                 data.A);
 #else
-                transCommandQueueList[r].enqueueReadBuffer(bufferListA[r], CL_FALSE, 0,
-                                        data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
+                // transCommandQueueList[r].enqueueReadBuffer(bufferListA[r], CL_FALSE, 0,
+                //                         data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
+                transCommandQueueList[r].enqueueMigrateMemObjects({bufferListA[r]}, CL_MIGRATE_MEM_OBJECT_HOST);
 #endif
         }
-
+        for (int r = 0; r < transposeKernelList.size(); r++)
+        {
+        transCommandQueueList[r].finish();
+        }
 
         // Exchange A data via PCIe and MPI
         handler.exchangeData(data);
@@ -284,11 +289,16 @@ static  std::unique_ptr<transpose::TransposeExecutionTimings>
                                                 local_matrix_width* data.blockSize*sizeof(HOST_DATA_TYPE), 0,
                                                 data.A);
 #else
-                transCommandQueueList[r].enqueueWriteBuffer(bufferListA[r], CL_TRUE, 0,
-                                        data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
+                // transCommandQueueList[r].enqueueWriteBuffer(bufferListA[r], CL_TRUE, 0,
+                //                         data.numBlocks * data.blockSize * data.blockSize * sizeof(HOST_DATA_TYPE), data.A);
+                transCommandQueueList[r].enqueueMigrateMemObjects({bufferListA[r]}, 0);
 #endif
         }
 #ifndef NDEBUG
+        for (int r = 0; r < transposeKernelList.size(); r++)
+        {
+        transCommandQueueList[r].finish();
+        }
         auto startKernelCalculation = std::chrono::high_resolution_clock::now();
 #endif
         for (int r = 0; r < transposeKernelList.size(); r++)
@@ -320,8 +330,14 @@ static  std::unique_ptr<transpose::TransposeExecutionTimings>
             startTransfer = std::chrono::high_resolution_clock::now();
 
                 for (int r = 0; r < transposeKernelList.size(); r++) {
-                        transCommandQueueList[r].enqueueReadBuffer(bufferListA_out[r], CL_TRUE, 0,
-                                                bufferSizeList[r]* sizeof(HOST_DATA_TYPE), &data.result[bufferStartList[r] * data.blockSize * data.blockSize]);
+                        // transCommandQueueList[r].enqueueReadBuffer(bufferListA_out[r], CL_TRUE, 0,
+                        //                         bufferSizeList[r]* sizeof(HOST_DATA_TYPE), &data.result[bufferStartList[r] * data.blockSize * data.blockSize]);
+                        transCommandQueueList[r].enqueueMigrateMemObjects({bufferListA_out[r]}, CL_MIGRATE_MEM_OBJECT_HOST);
+                }
+                for (int r = 0; r < transposeKernelList.size(); r++) {
+                        // transCommandQueueList[r].enqueueReadBuffer(bufferListA_out[r], CL_TRUE, 0,
+                        //                         bufferSizeList[r]* sizeof(HOST_DATA_TYPE), &data.result[bufferStartList[r] * data.blockSize * data.blockSize]);
+                        transCommandQueueList[r].finish();
                 }
             endTransfer = std::chrono::high_resolution_clock::now();
             transferTime +=
diff --git a/PTRANS/src/host/transpose_data.cpp b/PTRANS/src/host/transpose_data.cpp
index 3503dc6..33ada2c 100644
--- a/PTRANS/src/host/transpose_data.cpp
+++ b/PTRANS/src/host/transpose_data.cpp
@@ -54,13 +54,13 @@ transpose::TransposeData::TransposeData(cl::Context context, uint block_size, ui
                             clSVMAlloc(context(), 0 ,
                             block_size * block_size * y_size * sizeof(HOST_DATA_TYPE), 1024));
 #else
-        posix_memalign(reinterpret_cast<void **>(&A), 64,
+        posix_memalign(reinterpret_cast<void **>(&A), 4096,
                     sizeof(HOST_DATA_TYPE) * block_size * block_size * y_size);
-        posix_memalign(reinterpret_cast<void **>(&B), 64,
+        posix_memalign(reinterpret_cast<void **>(&B), 4096,
                     sizeof(HOST_DATA_TYPE) * block_size * block_size * y_size);
-        posix_memalign(reinterpret_cast<void **>(&result), 64,
+        posix_memalign(reinterpret_cast<void **>(&result), 4096,
                     sizeof(HOST_DATA_TYPE) * block_size * block_size * y_size);
-        posix_memalign(reinterpret_cast<void **>(&exchange), 64,
+        posix_memalign(reinterpret_cast<void **>(&exchange), 4096,
                     sizeof(HOST_DATA_TYPE) * block_size * block_size * y_size);
 #endif
     }
